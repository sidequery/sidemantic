---
title: "Format Adapters"
---

Sidemantic can import and export semantic models from other popular semantic layer formats, letting you migrate between tools or use Sidemantic alongside existing definitions.

## Supported Formats

| Format | Import | Export | Status |
|--------|--------|--------|--------|
| **Sidemantic** (native) | ✅ | ✅ | Full support |
| **Cube** | ✅ | ✅ | Core features |
| **MetricFlow** (dbt) | ✅ | ✅ | Core features |
| **LookML** (Looker) | ✅ | ✅ | Core features |
| **Hex** | ✅ | ✅ | Core features |

## Feature Compatibility

This table shows which Sidemantic features are preserved when importing/exporting to other formats:

| Feature | Cube | MetricFlow | LookML | Hex | Notes |
|---------|------|------------|--------|-----|-------|
| **Models** | ✅ | ✅ | ✅ | ✅ | Full bidirectional support |
| **Dimensions** | ✅ | ✅ | ✅ | ✅ | Full bidirectional support |
| **Time Dimensions** | ✅ | ✅ | ✅ | ✅ | LookML: dimension_group; Hex: type variants |
| **Simple Metrics** | ✅ | ✅ | ✅ | ✅ | sum, count, avg, etc. |
| **Ratio Metrics** | ✅ | ✅ | ✅ | ✅ | Hex: func_calc support |
| **Derived Metrics** | ✅ | ✅ | ✅ | ✅ | Hex: func_sql and func_calc |
| **Cumulative Metrics** | ✅ | ✅ | ⚠️ | ⚠️ | Cube: rolling_window; others: limited |
| **Time Comparison** | ⚠️ | ✅ | ⚠️ | ⚠️ | Exported as calculated measure |
| **Relationships** | ✅ | ✅ | ⚠️ | ✅ | Hex: explicit join_sql |
| **Segments** | ✅ | ⚠️ | ✅ | ⚠️ | Hex: via measure filters |
| **Metric Filters** | ✅ | ⚠️ | ✅ | ✅ | Hex: native filter support |
| **Parameters** | ❌ | ❌ | ❌ | ❌ | Not supported by target formats |
| **Hierarchies** | ⚠️ | ⚠️ | ⚠️ | ⚠️ | Stored in meta or drill_members |
| **Inheritance** | ✅ | ✅ | ✅ | ✅ | Resolved before export (fully merged) |
| **Jinja Templates** | ✅ | ✅ | ⚠️ | ✅ | LookML: uses Liquid |
| **Metadata Fields** | ⚠️ | ⚠️ | ⚠️ | ⚠️ | format exported; others in meta |
| **Ungrouped Queries** | ❌ | ❌ | ❌ | ❌ | Sidemantic-specific, not exportable |

**Legend:**
- ✅ Full support - feature works bidirectionally
- ⚠️ Partial support - feature works with limitations
- ❌ Not supported - feature lost on export
- 🚧 Experimental - may have bugs or limitations

**Important Notes:**

- **Inheritance**: When exporting models or metrics with `extends`, the adapter automatically resolves the inheritance chain and exports the fully merged result. The parent model/metric and the `extends` field are not included in the export - only the complete, merged definition.
- **Segments & Hierarchies in MetricFlow**: Since MetricFlow doesn't have native support for these features, they're stored in the `meta` field. They're preserved on round-trip but won't be used by MetricFlow's query engine.
- **Metadata Fields**: Most metadata fields (format, drill_fields, etc.) are stored in `meta` fields for compatibility, but `format` is exported natively where supported.

## Using Adapters

### Import from Cube

Convert Cube.js semantic models to Sidemantic:

```python
from sidemantic.adapters.cube import CubeAdapter

# Import from Cube YAML
adapter = CubeAdapter()
graph = adapter.parse("cube/schema/Orders.yml")

# Query with Sidemantic
from sidemantic import SemanticLayer
layer = SemanticLayer(graph=graph)
result = layer.sql("SELECT revenue FROM orders")
```

### Import from MetricFlow

Convert dbt MetricFlow models to Sidemantic:

```python
from sidemantic.adapters.metricflow import MetricFlowAdapter

# Import from MetricFlow YAML
adapter = MetricFlowAdapter()
graph = adapter.parse("models/metrics/")  # Directory of YAML files

# Query with Sidemantic
layer = SemanticLayer(graph=graph)
result = layer.sql("SELECT revenue FROM orders")
```

### Export to Cube

Convert Sidemantic models to Cube format:

```python
from sidemantic import SemanticLayer
from sidemantic.adapters.cube import CubeAdapter

# Load Sidemantic model
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Export to Cube
adapter = CubeAdapter()
adapter.export(layer.graph, "cube/schema/output.yml")
```

### Export to MetricFlow

Convert Sidemantic models to dbt MetricFlow:

```python
from sidemantic import SemanticLayer
from sidemantic.adapters.metricflow import MetricFlowAdapter

# Load Sidemantic model
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Export to MetricFlow
adapter = MetricFlowAdapter()
adapter.export(layer.graph, "models/metrics/semantic_layer.yml")
```

### Import from LookML

Convert Looker LookML views to Sidemantic:

```python
from sidemantic.adapters.lookml import LookMLAdapter

# Import from LookML
adapter = LookMLAdapter()
graph = adapter.parse("views/orders.lkml")  # Single file or directory

# Query with Sidemantic
from sidemantic import SemanticLayer
layer = SemanticLayer(graph=graph)
result = layer.sql("SELECT revenue FROM orders")
```

### Export to LookML

Convert Sidemantic models to LookML format:

```python
from sidemantic import SemanticLayer
from sidemantic.adapters.lookml import LookMLAdapter

# Load Sidemantic model
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Export to LookML
adapter = LookMLAdapter()
adapter.export(layer.graph, "views/output.lkml")
```

### Import from Hex

Convert Hex semantic models to Sidemantic:

```python
from sidemantic.adapters.hex import HexAdapter

# Import from Hex YAML
adapter = HexAdapter()
graph = adapter.parse("hex/models/")  # Directory of YAML files

# Query with Sidemantic
from sidemantic import SemanticLayer
layer = SemanticLayer(graph=graph)
result = layer.sql("SELECT revenue FROM orders")
```

### Export to Hex

Convert Sidemantic models to Hex format:

```python
from sidemantic import SemanticLayer
from sidemantic.adapters.hex import HexAdapter

# Load Sidemantic model
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Export to Hex (creates one file per model)
adapter = HexAdapter()
adapter.export(layer.graph, "hex/models/")
```

## Migration Examples

### Cube → Sidemantic → MetricFlow

Migrate from Cube to MetricFlow via Sidemantic:

```python
from sidemantic.adapters.cube import CubeAdapter
from sidemantic.adapters.metricflow import MetricFlowAdapter

# Import from Cube
cube_adapter = CubeAdapter()
graph = cube_adapter.parse("cube/schema/")

# Export to MetricFlow
mf_adapter = MetricFlowAdapter()
mf_adapter.export(graph, "models/metrics/converted.yml")
```

### MetricFlow → Sidemantic (with enhancements)

Import MetricFlow and add Sidemantic-specific features:

```python
from sidemantic.adapters.metricflow import MetricFlowAdapter
from sidemantic import SemanticLayer, Segment

# Import from MetricFlow
adapter = MetricFlowAdapter()
graph = adapter.parse("models/metrics/")

# Add Sidemantic features
layer = SemanticLayer(graph=graph)

# Add segments (not in MetricFlow)
orders = layer.graph.get_model("orders")
orders.segments.extend([
    Segment(name="completed", sql="{model}.status = 'completed'"),
    Segment(name="high_value", sql="{model}.amount >= 500")
])

# Save enhanced model
layer.to_yaml("semantic_layer.yml")
```

## Conversion Quirks

### Cube

**Import (Cube → Sidemantic):**

- `cubes` → `models`
- `dimensions` → `dimensions`
- `measures` → `metrics`
- `joins` → `relationships` (inferred from join definitions)
- `${CUBE}` placeholder → `{model}` placeholder
- `segments` → `segments` (native support)
- Calculated measures (type=number) → derived metrics
- `rolling_window` → cumulative metrics

**Export (Sidemantic → Cube):**

- Ratio metrics → calculated measures with division SQL
- Cumulative metrics → measures with `rolling_window`
- Segments → native segment definitions
- Hierarchies → `drill_members` arrays
- Inheritance is resolved before export (fully merged definitions)

### MetricFlow

**Import (MetricFlow → Sidemantic):**

- `semantic_models` → `models`
- `entities` → inferred `relationships`
- `dimensions` → `dimensions`
- `measures` → model-level `metrics`
- `metrics` (graph-level) → graph-level `metrics`
- Segments/hierarchies from `meta` field → preserved

**Export (Sidemantic → MetricFlow):**

- Segments → stored in `meta` (no native support)
- Hierarchies → stored in dimension `meta`
- Inheritance info in `meta` then stripped (definitions fully resolved)
- Relationships → `entities` with foreign keys

### LookML

**Import (LookML → Sidemantic):**

- `views` → `models`
- `dimensions` → `dimensions`
- `dimension_group` → multiple time dimensions (one per timeframe)
- `measures` → `metrics`
- `filters` (view-level) → `segments`
- `derived_table` → model with SQL
- `${TABLE}` placeholder → `{model}` placeholder
- Measure filters parsed from `filters__all`

**Export (Sidemantic → LookML):**

- Multiple time dimensions with same base name → single `dimension_group` with multiple timeframes
- Segments → view-level `filters`
- Ratio/derived metrics → type=number measures
- `{model}` placeholder → `${TABLE}` placeholder

### Hex

**Import (Hex → Sidemantic):**

- Model `id` and `base_sql_table`/`base_sql_query` → `models`
- `dimensions` with `expr_sql` or `expr_calc` → `dimensions`
- `measures` with `func`/`func_sql`/`func_calc` → `metrics`
- `relations` with `join_sql` → `relationships`
- Measure `filters` (inline or referenced) → metric filters
- `unique: true` dimensions → primary key detection
- `timestamp_tz`/`timestamp_naive`/`date` types → time dimensions

**Export (Sidemantic → Hex):**

- Each model → separate YAML file
- Time dimensions → specific type variants (date vs timestamp_tz)
- Ratio/derived metrics → `func_sql`
- Segments not directly supported (can use measure filters)
- `${interpolation}` references preserved where possible

## Round-Trip Guarantees

### Lossless Round-Trips

These conversions preserve all information:

- **Sidemantic → Sidemantic**: Perfect round-trip (native format)

### Lossy Round-Trips

These conversions lose some information:

- **Sidemantic → Cube → Sidemantic**: Loses segments, cumulative metrics, time comparisons
- **Sidemantic → MetricFlow → Sidemantic**: Loses segments, ungrouped query support, hierarchies
- **Any format → Sidemantic**: May lose format-specific metadata

**Best Practice:** Keep your source of truth in one format and export to others as needed. Don't round-trip unless necessary.

## Validating Conversions

Always validate after import/export:

```python
# Import
graph = adapter.parse("source.yml")

# Verify models loaded
print(f"Loaded {len(graph.models)} models")
for name, model in graph.models.items():
    print(f"  {name}: {len(model.metrics)} metrics, {len(model.dimensions)} dimensions")

# Verify metrics
print(f"Loaded {len(graph.metrics)} graph-level metrics")

# Test query
layer = SemanticLayer(graph=graph)
sql = layer.compile(metrics=["orders.revenue"])
print("Generated SQL:", sql)

# Export and compare
adapter.export(graph, "output.yml")
graph2 = adapter.parse("output.yml")
assert len(graph.models) == len(graph2.models)
```

## Getting Help

If you encounter issues with format conversion:

1. Check the [compatibility table](#feature-compatibility) for known limitations
2. Validate your source format is correctly structured
3. Test with a simple model first before converting complex definitions
4. File an issue at [github.com/anthropics/sidemantic](https://github.com/anthropics/sidemantic/issues) with:
   - Source format and file
   - Expected vs actual behavior
   - Generated SQL or error messages

## Contributing Adapters

Want to add support for another format? See our [adapter development guide](https://github.com/anthropics/sidemantic/blob/main/CONTRIBUTING.md) or file a feature request.

Popular formats we'd like to support:
- **Malloy** - Google's semantic modeling language
- **Omni** - Modern BI semantic layer
- **GoodData** - Enterprise analytics platform
- **AtScale** - Semantic layer for data warehouses
- **Apache Superset** - Open-source BI semantic layer
