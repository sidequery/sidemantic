---
title: "Examples"
---

## Basic Query

```yaml
models:
  - name: orders
    table: orders
    primary_key: id
    measures:
      - name: revenue
        agg: sum
        expr: amount
```

```python
layer.sql("SELECT revenue FROM orders")
```

## Filtering and Grouping

```python
layer.sql("""
    SELECT revenue, status
    FROM orders
    WHERE status IN ('completed', 'shipped')
""")
```

::: {.callout-tip}
## No GROUP BY Needed
The semantic layer automatically groups by dimensions. Just select what you want!
:::

## Time Dimensions

```yaml
dimensions:
  - name: order_date
    type: time
    sql: order_date
    granularity: day
```

```python
# Automatic time grouping
layer.sql("""
    SELECT revenue, order_date
    FROM orders
""")
```

## Cross-Model Queries

```yaml
models:
  - name: orders
    table: orders
    primary_key: id
    joins:
      - name: customers
        type: belongs_to
        foreign_key: customer_id

  - name: customers
    table: customers
    primary_key: id
    dimensions:
      - name: region
        type: categorical
        sql: region
```

```python
# Automatic join
layer.sql("""
    SELECT orders.revenue, customers.region
    FROM orders
""")
```

::: {.callout-warning}
## Filter on Joined Tables
Only filter on tables that are joined via metrics or dimensions:
- ❌ `SELECT orders.revenue WHERE customers.region = 'US'` (customers not joined!)
- ✅ `SELECT orders.revenue, customers.region WHERE customers.region = 'US'`

Adding a dimension from the table ensures it gets joined.
:::

## Ratio Measures

```yaml
measures:
  - name: completed_revenue
    agg: sum
    expr: amount
    filters: ["status = 'completed'"]

  - name: total_revenue
    agg: sum
    expr: amount

  - name: completion_rate
    type: ratio
    numerator: completed_revenue
    denominator: total_revenue
```

```python
layer.sql("SELECT completion_rate FROM orders")
```

## Derived Measures

```yaml
measures:
  - name: revenue
    agg: sum
    expr: amount

  - name: cost
    agg: sum
    expr: cost

  - name: profit
    type: derived
    expr: "revenue - cost"

  - name: margin
    type: derived
    expr: "profit / revenue"
```

```python
layer.sql("SELECT revenue, profit, margin FROM orders")
```

## Cumulative Metrics

```yaml
measures:
  - name: daily_revenue
    agg: sum
    expr: amount

  - name: running_total
    type: cumulative
    expr: daily_revenue
    window: "7 days"

  - name: mtd_revenue
    type: cumulative
    expr: daily_revenue
    grain_to_date: month
```

```python
layer.sql("""
    SELECT order_date, running_total, mtd_revenue
    FROM orders
""")
```

## Parameterized Queries

```yaml
parameters:
  - name: start_date
    type: date
    default_value: "2024-01-01"

  - name: min_amount
    type: number
    default_value: 100
```

```python
layer.sql(
    "SELECT revenue FROM orders WHERE order_date >= {{ start_date }}",
    parameters={"start_date": "2024-06-01"}
)
```

::: {.callout-warning}
## Parameter Syntax
DON'T add quotes around `{{ param }}` - they're added automatically based on type:
- ❌ `WHERE date >= '{{ start_date }}'` (double quotes!)
- ✅ `WHERE date >= {{ start_date }}`
:::

## Multi-Hop Joins

```yaml
models:
  - name: orders
    joins:
      - name: customers
        type: belongs_to
        foreign_key: customer_id

  - name: customers
    joins:
      - name: regions
        type: belongs_to
        foreign_key: region_id

  - name: regions
    dimensions:
      - name: country
        type: categorical
        sql: country
```

```python
# Spans 2 hops: orders -> customers -> regions
layer.sql("""
    SELECT orders.revenue, regions.country
    FROM orders
""")
```

## Real Examples

See `/examples` directory for:

- `sql_query_example.py` - SQL interface examples
- `parameters_example.py` - Parameterized queries
- `symmetric_aggregates_example.py` - Fan-out handling
- `streamlit_dashboard.py` - Interactive dashboard
