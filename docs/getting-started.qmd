---
title: "Getting Started"
---

## Installation

```bash
pip install sidemantic
# or
uv add sidemantic
```

## Interactive Demo

Try the interactive demo locally:

```bash
git clone https://github.com/anthropics/sidemantic
cd sidemantic
uv run marimo run examples/demo.py
```

This opens an interactive notebook where you can explore the semantic layer with real-time queries.

## Your First Semantic Layer

### 1. Define Models (YAML)

Create `semantic_layer.yml`:

```yaml
# yaml-language-server: $schema=./sidemantic-schema.json

models:
  - name: orders
    table: orders
    primary_key: order_id

    dimensions:
      - name: order_date
        type: time
        sql: order_date
        granularity: day

      - name: status
        type: categorical
        sql: status

    metrics:
      - name: revenue
        agg: sum
        sql: amount

      - name: order_count
        agg: count
```

### 2. Query with SQL

```python
from sidemantic import SemanticLayer

# Load semantic layer
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Query with SQL
result = layer.sql("""
    SELECT revenue, order_count, status
    FROM orders
    WHERE status = 'completed'
""")

df = result.fetchdf()
print(df)
```

### 3. Add Relationships

Define relationships between models:

```yaml
models:
  - name: orders
    table: orders
    primary_key: order_id
    relationships:
      - name: customer
        type: many_to_one
        foreign_key: customer_id

  - name: customers
    table: customers
    primary_key: customer_id
```

Query across models:

```python
# Automatic join
result = layer.sql("""
    SELECT orders.revenue, customers.region
    FROM orders
""")
```

### 4. Complex Metrics

Add graph-level metrics with automatic dependency detection:

```yaml
models:
  - name: orders
    metrics:
      - name: revenue
        agg: sum
        sql: amount

      - name: completed_revenue
        agg: sum
        sql: amount
        filters: ["status = 'completed'"]

# Graph-level metrics (dependencies auto-detected!)
metrics:
  # Simple reference
  - name: total_revenue
    sql: orders.revenue

  # Ratio
  - name: conversion_rate
    type: ratio
    numerator: orders.completed_revenue
    denominator: orders.revenue

  # Derived (dependencies auto-detected from formula!)
  - name: profit_margin
    type: derived
    sql: "(revenue - cost) / revenue"

  # Cumulative
  - name: running_total
    type: cumulative
    sql: orders.revenue
    window: "7 days"
```

## Editor Autocomplete

Generate JSON Schema for IDE support:

```bash
uv run python -m sidemantic.schema
```

This creates `sidemantic-schema.json`. Add to your YAML:

```yaml
# yaml-language-server: $schema=./sidemantic-schema.json
```

Now get autocomplete in VS Code, IntelliJ, and other editors!

## Next Steps

- [Examples](examples.qmd) - Real-world use cases
- [YAML Reference](YAML_FORMAT.md) - Complete specification
- [GOTCHAS](GOTCHAS.md) - Common pitfalls and solutions
