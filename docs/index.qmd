---
title: "Sidemantic"
subtitle: "SQLGlot-based semantic layer"
---

## What is Sidemantic?

Sidemantic is a semantic layer that lets you define metrics once and query them with SQL. It automatically handles joins, aggregations, and complex calculations.

```yaml
# Define once
models:
  - name: orders
    table: orders
    metrics:
      - name: revenue
        agg: sum
        sql: amount
```

```python
# Query anywhere with SQL
layer.sql("SELECT revenue FROM orders")
```

## Key Features

- **YAML definitions** with JSON Schema for autocomplete
- **SQL query interface** - write familiar SQL, get semantic results
- **Automatic joins** - define relationships once, query across models
- **Auto-detected dependencies** - no manual dependency declarations needed!
- **Complex metrics** - ratios, formulas, cumulative metrics, time comparisons
- **Multi-dialect** - SQLGlot powers cross-database SQL generation

## Quick Example

```yaml
# semantic_layer.yml
models:
  - name: orders
    table: orders
    primary_key: order_id

    relationships:
      - name: customer
        type: many_to_one
        foreign_key: customer_id

    dimensions:
      - name: status
        type: categorical
        sql: status

    metrics:
      - name: revenue
        agg: sum
        sql: amount

# Graph-level metrics (dependencies auto-detected!)
metrics:
  - name: total_revenue
    sql: orders.revenue
```

```python
from sidemantic import SemanticLayer

layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Query with SQL
result = layer.sql("""
    SELECT revenue, status
    FROM orders
    WHERE status = 'completed'
""")

df = result.fetchdf()
```

## Learn More

- [Getting Started](getting-started.qmd) - Step-by-step tutorial
- [Examples](examples.qmd) - Real-world examples
- [YAML Reference](YAML_FORMAT.md) - Complete YAML specification
