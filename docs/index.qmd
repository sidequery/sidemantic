---
title: "Sidemantic"
subtitle: "Define metrics once, query them anywhere with SQL or Python"
---

**Compatible with 8+ formats:** Cube, MetricFlow (dbt), LookML (Looker), Hex, Rill, Superset, Omni, or native Sidemantic YAML.

```yaml
# Define once
models:
  - name: orders
    table: orders
    metrics:
      - name: revenue
        agg: sum
        sql: amount
```

```python
# Query with SQL
layer.sql("SELECT revenue FROM orders WHERE status = 'completed'")

# Or use Python API
layer.query(
    metrics=["orders.revenue"],
    dimensions=["orders.status"],
    filters=["orders.status = 'completed'"]
)
```

## Why Sidemantic?

**Write SQL, get semantic results.** Query your metrics with familiar SQL syntax while Sidemantic handles the complexity behind the scenes.

**Accurate by design.** Prevents common errors like join fan-out, incorrect aggregations, and double-counting through relationship-aware query generation.

**Smart automation.** Automatic joins across models, dependency detection, and multi-hop relationship discovery.

**Rich metric types.** From simple aggregations to ratios, time comparisons, conversion funnels, and cumulative calculations.

**Flexible and powerful.** Jinja2 templating, reusable segments, hierarchies, and inheritance.

## Quick Example

```yaml
# semantic_layer.yml
models:
  - name: orders
    table: orders
    primary_key: order_id

    relationships:
      - name: customer
        type: many_to_one
        foreign_key: customer_id

    dimensions:
      - name: status
        type: categorical
        sql: status

    metrics:
      - name: revenue
        agg: sum
        sql: amount

# Graph-level metrics (dependencies auto-detected!)
metrics:
  - name: total_revenue
    sql: orders.revenue
```

```python
from sidemantic import SemanticLayer

layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Query with SQL
result = layer.sql("""
    SELECT revenue, status
    FROM orders
    WHERE status = 'completed'
""")

df = result.fetchdf()
```

## Learn More

- [Getting Started](getting-started.qmd) - Step-by-step tutorial
- [Interactive Demo](dashboard.qmd) - Try Sidemantic in your browser
- [Python API](python-api.qmd) - Programmatic query interface
- [Adapters](adapters.qmd) - Import from Cube, dbt, Looker, and more
- [Advanced Features](advanced-features.qmd) - Full feature list and examples
- [Examples](examples.qmd) - Sample use cases
- [YAML Reference](YAML_FORMAT.md) - Complete YAML specification
