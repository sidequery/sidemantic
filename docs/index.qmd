---
title: "Sidemantic"
subtitle: "SQLGlot-based semantic layer"
---

## What is Sidemantic?

Sidemantic is a semantic layer that lets you define metrics once and query them with SQL. It automatically handles joins, aggregations, and complex calculations.

```yaml
# Define once
models:
  - name: orders
    table: orders
    metrics:
      - name: revenue
        agg: sum
        sql: amount
```

```python
# Query anywhere with SQL
layer.sql("SELECT revenue FROM orders")
```

## Key Features

### Core Capabilities
- **YAML definitions** with JSON Schema for autocomplete
- **SQL query interface** - write familiar SQL, get semantic results
- **Automatic joins** - define relationships once, query across models
- **Multi-hop joins** - automatic 2+ hop join path discovery
- **Auto-detected dependencies** - no manual dependency declarations needed!
- **Multi-dialect** - SQLGlot powers cross-database SQL generation

### Rich Metric Types
- **Aggregations** - sum, avg, count, count_distinct, min, max
- **Ratios** - revenue / order_count
- **Derived formulas** - (revenue - cost) / revenue
- **Cumulative** - running totals, rolling windows
- **Time comparisons** - YoY, MoM, WoW with LAG window functions
- **Conversion funnels** - signup â†’ purchase rate

### Advanced Features
- **Segments** - reusable named filters with template placeholders
- **Metric-level filters** - auto-applied filters for business logic
- **Jinja2 templating** - full conditionals and loops in SQL
- **Inheritance** - extend models and metrics (DRY principles)
- **Hierarchies** - parent/child dimensions with drill-down API
- **Relative dates** - "last 7 days", "this month", etc.
- **Ungrouped queries** - raw row access without aggregation

### Metadata & Governance
- **Display formatting** - format strings and named formats (USD, percent)
- **Drill fields** - define drill-down paths for BI tools
- **Non-additivity markers** - prevent incorrect aggregation
- **Default dimensions** - default time dimensions and granularity

## Quick Example

```yaml
# semantic_layer.yml
models:
  - name: orders
    table: orders
    primary_key: order_id

    relationships:
      - name: customer
        type: many_to_one
        foreign_key: customer_id

    dimensions:
      - name: status
        type: categorical
        sql: status

    metrics:
      - name: revenue
        agg: sum
        sql: amount

# Graph-level metrics (dependencies auto-detected!)
metrics:
  - name: total_revenue
    sql: orders.revenue
```

```python
from sidemantic import SemanticLayer

layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Query with SQL
result = layer.sql("""
    SELECT revenue, status
    FROM orders
    WHERE status = 'completed'
""")

df = result.fetchdf()
```

## Learn More

- [Getting Started](getting-started.qmd) - Step-by-step tutorial
- [Examples](examples.qmd) - Real-world examples
- [YAML Reference](YAML_FORMAT.md) - Complete YAML specification
