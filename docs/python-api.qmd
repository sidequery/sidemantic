---
title: "Python API"
---

Complete Python API reference.

## SemanticLayer

Main entry point:

```python
from sidemantic import SemanticLayer

# Create
layer = SemanticLayer()

# From YAML
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# With custom connection
layer = SemanticLayer(connection="duckdb:///data.db")
```

### Methods

#### query()

Execute a query and return results:

```python
result = layer.query(
    metrics=["orders.revenue", "orders.order_count"],
    dimensions=["orders.status"],
    filters=["orders.status = 'completed'"],
    order_by=["orders.revenue DESC"],
    limit=10,
    offset=5
)

df = result.fetchdf()  # Get DataFrame
```

#### sql()

Query with SQL:

```python
result = layer.sql("""
    SELECT revenue, status
    FROM orders
    WHERE status = 'completed'
    LIMIT 10
""")

df = result.fetchdf()
```

With parameters:

```python
result = layer.sql(
    "SELECT revenue FROM orders WHERE order_date >= {{ start_date }}",
    parameters={"start_date": "2024-01-01"}
)
```

#### compile()

Generate SQL without executing:

```python
sql = layer.compile(
    metrics=["orders.revenue"],
    dimensions=["orders.status"],
    filters=["orders.status = 'completed'"]
)

print(sql)
```

#### add_model()

Add a model:

```python
from sidemantic import Model, Dimension, Metric

orders = Model(
    name="orders",
    table="orders",
    primary_key="id",
    dimensions=[...],
    metrics=[...]
)

layer.add_model(orders)
```

#### add_metric()

Add a top-level metric:

```python
from sidemantic import Metric

total_revenue = Metric(
    name="total_revenue",
    sql="orders.revenue"
)

layer.add_metric(total_revenue)
```

#### from_yaml() / to_yaml()

Load/save YAML:

```python
# Load
layer = SemanticLayer.from_yaml("semantic_layer.yml")

# Save
layer.to_yaml("output.yml")
```

## Model

Define a data model:

```python
from sidemantic import Model, Dimension, Metric, Relationship

model = Model(
    name="orders",
    table="orders",
    primary_key="id",
    description="Customer orders",

    dimensions=[
        Dimension(name="status", type="categorical", sql="status"),
        Dimension(name="order_date", type="time", sql="created_at", granularity="day")
    ],

    metrics=[
        Metric(name="revenue", agg="sum", sql="amount"),
        Metric(name="order_count", agg="count")
    ],

    relationships=[
        Relationship(name="customers", type="many_to_one", foreign_key="customer_id")
    ]
)
```

### Properties

- **name**: Unique identifier
- **table**: Physical table name (or use `sql`)
- **sql**: SQL query for derived models
- **primary_key**: Primary key column
- **dimensions**: List of Dimension objects
- **measures**: List of Measure objects
- **joins**: List of Join objects
- **description**: Human-readable description

## Dimension

Define a dimension:

```python
from sidemantic import Dimension

# Categorical
status = Dimension(
    name="status",
    type="categorical",
    sql="status"
)

# Time
order_date = Dimension(
    name="order_date",
    type="time",
    sql="created_at",
    granularity="day"
)

# Boolean
is_active = Dimension(
    name="is_active",
    type="boolean",
    sql="active"
)

# Numeric
tier = Dimension(
    name="tier",
    type="numeric",
    sql="customer_tier"
)
```

### Properties

- **name**: Unique identifier
- **type**: `categorical`, `time`, `boolean`, or `numeric`
- **sql**: SQL expression (defaults to name)
- **granularity**: For time dimensions: `hour`, `day`, `week`, `month`, `quarter`, `year`
- **description**: Human-readable description

## Metric

Define a metric:

```python
from sidemantic import Metric

# Simple aggregation
revenue = Metric(
    name="revenue",
    agg="sum",
    sql="amount"
)

# With filter
completed_revenue = Metric(
    name="completed_revenue",
    agg="sum",
    sql="amount",
    filters=["status = 'completed'"]
)

# Ratio
conversion_rate = Metric(
    name="conversion_rate",
    type="ratio",
    numerator="completed_orders",
    denominator="total_orders"
)

# Derived
profit = Metric(
    name="profit",
    type="derived",
    sql="revenue - cost"
)

# Cumulative
running_total = Metric(
    name="running_total",
    type="cumulative",
    sql="revenue",
    window="7 days"
)

# Time comparison
yoy_growth = Metric(
    name="yoy_growth",
    type="time_comparison",
    base_metric="revenue",
    comparison_type="yoy",
    calculation="percent_change"
)
```

### Properties

#### Simple Aggregations

- **name**: Unique identifier
- **agg**: `sum`, `count`, `count_distinct`, `avg`, `min`, `max`, `median`
- **sql**: SQL expression (defaults to `*` for count)
- **filters**: List of WHERE conditions
- **description**: Human-readable description

#### Ratio Metrics

- **type**: `"ratio"`
- **numerator**: Numerator measure name
- **denominator**: Denominator measure name
- **offset_window**: Time offset for denominator (e.g., `"1 month"`)

#### Derived Metrics

- **type**: `"derived"`
- **sql**: Formula expression

#### Cumulative Measures

- **type**: `"cumulative"`
- **sql**: Base measure name
- **window**: Rolling window (e.g., `"7 days"`)
- **grain_to_date**: Period-to-date (`day`, `week`, `month`, `quarter`, `year`)

#### Time Comparison Measures

- **type**: `"time_comparison"`
- **base_metric**: Base measure name
- **comparison_type**: `yoy`, `mom`, `wow`, `dod`, `qoq`, `prior_period`
- **time_offset**: Custom offset (e.g., `"3 months"`)
- **calculation**: `percent_change`, `difference`, or `ratio`

## Relationship

Define a join relationship:

```python
from sidemantic import Relationship

# many_to_one (foreign key in THIS table)
customers_join = Relationship(
    name="customers",
    type="many_to_one",
    foreign_key="customer_id"
)

# one_to_many (foreign key in OTHER table)
orders_join = Relationship(
    name="orders",
    type="one_to_many",
    foreign_key="customer_id"
)

# one_to_one (foreign key in OTHER table, unique)
invoice_join = Relationship(
    name="invoice",
    type="one_to_one",
    foreign_key="order_id"
)
```

### Properties

- **name**: Name of related model
- **type**: `many_to_one`, `one_to_many`, or `one_to_one`
- **foreign_key**: Foreign key column name

## Parameter

Define query parameters:

```python
from sidemantic import Parameter

start_date = Parameter(
    name="start_date",
    type="date",
    default_value="2024-01-01"
)

min_amount = Parameter(
    name="min_amount",
    type="number",
    default_value=100
)

region = Parameter(
    name="region",
    type="string",
    default_value="US",
    allowed_values=["US", "EU", "APAC"]
)
```

### Properties

- **name**: Parameter name
- **type**: `string`, `number`, `date`, `unquoted`, `yesno`
- **default_value**: Default value
- **allowed_values**: List of valid values
- **description**: Human-readable description

## Complete Example

```python
from sidemantic import (
    SemanticLayer, Model, Dimension, Metric, Relationship, Parameter
)

# Create semantic layer
layer = SemanticLayer()

# Define orders model
orders = Model(
    name="orders",
    table="orders",
    primary_key="id",

    dimensions=[
        Dimension(name="status", type="categorical", sql="status"),
        Dimension(name="order_date", type="time", sql="created_at", granularity="day")
    ],

    metrics=[
        Metric(name="revenue", agg="sum", sql="amount"),
        Metric(name="order_count", agg="count"),
        Metric(
            name="conversion_rate",
            type="ratio",
            numerator="completed_orders",
            denominator="total_orders"
        )
    ],

    relationships=[
        Relationship(name="customers", type="many_to_one", foreign_key="customer_id")
    ]
)

# Define customers model
customers = Model(
    name="customers",
    table="customers",
    primary_key="id",

    dimensions=[
        Dimension(name="region", type="categorical", sql="region")
    ],

    metrics=[
        Metric(name="customer_count", agg="count")
    ],

    relationships=[
        Relationship(name="orders", type="one_to_many", foreign_key="customer_id")
    ]
)

# Add models
layer.add_model(orders)
layer.add_model(customers)

# Query with SQL
result = layer.sql("""
    SELECT orders.revenue, customers.region
    FROM orders
    WHERE orders.status = 'completed'
""")

df = result.fetchdf()
print(df)

# Or programmatically
result = layer.query(
    metrics=["orders.revenue", "customers.customer_count"],
    dimensions=["customers.region"],
    filters=["orders.status = 'completed'"]
)

df = result.fetchdf()
print(df)
```
